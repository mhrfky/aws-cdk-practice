name: Deploy Backend API

on:
  push:
    branches: [main]
    paths:
      - 'backend-api/**'
      - '.github/workflows/deploy-api.yml'
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get ECR repository name
        id: repo-info
        run: |
          REPO_NAME=$(aws cloudformation list-exports --query "Exports[?Name=='ApiRepositoryName'].Value" --output text)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.repo-info.outputs.REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Fallback to default name if can't get from CloudFormation exports
          if [ -z "$ECR_REPOSITORY" ]; then
            ECR_REPOSITORY="file-processing-api"
            # Check if repository exists, if not, create it
            aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY
          fi
          
          cd backend-api
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get ECS service info
        id: ecs-info
        run: |
          CLUSTER_NAME=$(aws cloudformation list-exports --query "Exports[?Name=='ApiClusterName'].Value" --output text)
          SERVICE_NAME=$(aws cloudformation list-exports --query "Exports[?Name=='ApiServiceName'].Value" --output text)
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          # Fallback to default names if can't get from CloudFormation exports
          CLUSTER_NAME="${{ steps.ecs-info.outputs.CLUSTER_NAME }}"
          SERVICE_NAME="${{ steps.ecs-info.outputs.SERVICE_NAME }}"
          
          if [ -n "$CLUSTER_NAME" ] && [ -n "$SERVICE_NAME" ]; then
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
            echo "Successfully updated ECS service"
          else
            echo "Unable to find ECS cluster and service names. Make sure the stack is deployed first."
            exit 1
          fi