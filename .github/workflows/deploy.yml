name: Deploy Infrastructure

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g aws-cdk
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Bootstrap CDK
        run: cdk bootstrap
        continue-on-error: false

      - name: Determine changed stacks
        id: changes
        run: |
          # Use CDK diff to identify which stacks have changes
          DIFF_OUTPUT=$(cdk diff --all)
          echo "CHANGES=$DIFF_OUTPUT" >> $GITHUB_OUTPUT
          
          # For simplicity in this example, we'll deploy all stacks
          # But you could parse the diff output to be more selective
          echo "DEPLOY_ALL=true" >> $GITHUB_OUTPUT

      - name: Deploy stacks in optimal order
        run: |
          # If we only need specific stacks, we'd use individual deploy commands
          # based on the changes detected
          if [ "${{ steps.changes.outputs.DEPLOY_ALL }}" = "true" ]; then
            # Deploy networking first
            cdk deploy FileProcessingNetwork --require-approval never
            
            # Deploy storage and database in parallel with --exclusively flag
            cdk deploy FileProcessingStorage --exclusively --require-approval never &
            cdk deploy FileProcessingDatabase --exclusively --require-approval never &
            wait
            
            # Deploy compute and API after dependencies are ready
            cdk deploy FileProcessingCompute --require-approval never &
            cdk deploy FileProcessingBackendApi --require-approval never &
            wait
          fi